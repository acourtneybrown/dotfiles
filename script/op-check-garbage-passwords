#!/usr/bin/env bash
#
# Checks for duplicate & missing passwords, including the "Garbage" vault.
# Arguments:
#   id for Garbage vault - optional
#   user id (email) for 1Password account - optional

function cleanup() {
    local garbage_vault="$1"
    local op_user="$2"

    op vault user revoke --vault "$garbage_vault" --user "$op_user" >/dev/null
}

function op_check_garbage_passwords() {
    local garbage_vault="${1:-ai37vtvl2day77mrnfu6kclega}"
    local op_user="${2:-$(op whoami --format=json | jq -r '.email')}"
    local id
    local item
    local fields
    local pw
    declare -A idForPw

    op vault user grant --vault "$garbage_vault" --user "$op_user" --permissions allow_viewing >/dev/null
    # shellcheck disable=SC2064
    trap "cleanup '$garbage_vault' '$op_user'" EXIT

    for id in $(op item list --categories Login --format=json | jq -r '.[] | select(.id != null) | .id'); do
        item=$(op item get "$id" --format=json)
        if [[ $item != null ]]; then
            fields=$(jq -r '.fields' <<<"$item")
            if [[ $fields != null ]]; then
                pw=$(jq -r '.[] | select(.id=="password").value' <<<"$fields")
            fi

            if [[ $pw != null ]]; then
                if [[ ${idForPw[$pw]} ]]; then
                    echo "Duplicate password found: ${idForPw[$pw]} and $id"
                else
                    idForPw[$pw]=$id
                fi
            elif jq -e '.tags | contains(["NoPasswordOk"]) | not' <<<"$item" >/dev/null ; then
                echo "Empty password for id $id"
            fi
        fi
    done

    op vault user revoke --vault "$garbage_vault" --user "$op_user" >/dev/null
}

op_check_garbage_passwords "$@"
